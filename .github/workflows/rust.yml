# Enhanced CI/CD pipeline for rjot
name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Quick check job for fast feedback
  check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: check-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          check-${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  # Security audit
  security:
    name: Security Audit  
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: audit-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo audit --version || cargo install cargo-audit --locked

    - name: Run security audit
      run: cargo audit

  # Cross-platform testing
  test:
    name: Test on ${{ matrix.os }}
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest  
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install OpenSSL (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install openssl

    - name: Set OpenSSL environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        OPENSSL_PREFIX=$(brew --prefix openssl)
        echo "OPENSSL_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig" >> $GITHUB_ENV

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: test-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          test-${{ matrix.target }}-cargo-

    - name: Run tests
      run: cargo test --verbose --target ${{ matrix.target }}
      env:
        OPENSSL_STATIC: 1

    - name: Run integration tests  
      run: cargo test --verbose --target ${{ matrix.target }} --test '*'
      env:
        OPENSSL_STATIC: 1

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
      env:
        OPENSSL_STATIC: 1

  # Test coverage (Linux only)
  coverage:
    name: Code Coverage
    needs: check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: coverage-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-llvm-cov
      run: cargo llvm-cov --version || cargo install cargo-llvm-cov --locked

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        flags: unittests
        name: codecov-rjot
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Benchmarks (optional, for performance regression detection)
  benchmarks:
    name: Benchmarks
    needs: check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: bench-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --no-run  # Only build benchmarks for now

  # Final validation
  ci-success:
    name: CI Success
    needs: [check, security, test, coverage]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.check.result }}" != "success" ]] || 
           [[ "${{ needs.security.result }}" != "success" ]] ||
           [[ "${{ needs.test.result }}" != "success" ]] ||
           [[ "${{ needs.coverage.result }}" != "success" ]]; then
          echo "One or more CI jobs failed"
          exit 1
        else
          echo "All CI jobs passed successfully"
        fi

